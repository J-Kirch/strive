{"name":"Strive","tagline":"A Haskell client for the Strava V3 API.","body":"[![Build Status](https://travis-ci.org/tfausak/strive.svg?branch=master)](https://travis-ci.org/tfausak/strive)\r\n\r\n-   [Usage](#usage)\r\n    -   [Authentication](#authentication)\r\n        -   [Request Access](#request-access)\r\n        -   [Token Exchange](#token-exchange)\r\n        -   [Deauthorization](#deauthorization)\r\n    -   [Athletes](#athletes)\r\n        -   [Retrieve Current Athlete](#retrieve-current-athlete)\r\n        -   [Retrieve Another Athlete](#retrieve-another-athlete)\r\n        -   [Update Current Athlete](#update-current-athlete)\r\n        -   [List Athlete K/QOMs/CRs](#list-athlete-kqomscrs)\r\n    -   [Friends and Followers](#friends-and-followers)\r\n        -   [List Athlete Friends](#list-athlete-friends)\r\n        -   [List Athlete Followers](#list-athlete-followers)\r\n        -   [List Both Following](#list-both-following)\r\n    -   [Activities](#activities)\r\n        -   [Create an Activity](#create-an-activity)\r\n        -   [Retrieve an Activity](#retrieve-an-activity)\r\n        -   [Update an Activity](#update-an-activity)\r\n        -   [Delete an Activity](#delete-an-activity)\r\n        -   [List Athlete Activities](#list-athlete-activities)\r\n        -   [List Friends' Activities](#list-friends-activities)\r\n        -   [List Activity Zones](#list-activity-zones)\r\n        -   [List Activity Laps](#list-activity-laps)\r\n    -   [Comments](#comments)\r\n        -   [List Activity Comments](#list-activity-comments)\r\n    -   [Kudos](#kudos)\r\n        -   [List Activity Kudoers](#list-activity-kudoers)\r\n    -   [Photos](#photos)\r\n        -   [List Activity Photos](#list-activity-photos)\r\n    -   [Clubs](#clubs)\r\n        -   [Retrieve a Club](#retrieve-a-club)\r\n        -   [List Athlete Clubs](#list-athlete-clubs)\r\n        -   [List Club Members](#list-club-members)\r\n        -   [List Club Activities](#list-club-activities)\r\n    -   [Gear](#gear)\r\n        -   [Retrieve Gear](#retrieve-gear)\r\n    -   [Segments](#segments)\r\n        -   [Retrieve a Segment](#retrieve-a-segment)\r\n        -   [List Starred Segments](#list-starred-segments)\r\n        -   [List Efforts](#list-efforts)\r\n        -   [Segment Leaderboard](#segment-leaderboard)\r\n        -   [Segment Explorer](#segment-explorer)\r\n        -   [Segment Efforts](#segment-efforts)\r\n        -   [Retrieve a Segment Effort](#retrieve-a-segment-effort)\r\n    -   [Streams](#streams)\r\n        -   [Retrieve Activity Streams](#retrieve-activity-streams)\r\n        -   [Retrieve Effort Streams](#retrieve-effort-streams)\r\n        -   [Retrieve Segment Streams](#retrieve-segment-streams)\r\n    -   [Uploads](#uploads)\r\n        -   [Upload an Activity](#upload-an-activity)\r\n        -   [Check Upload Status](#check-upload-status)\r\n\r\n## Usage\r\n\r\nTo use the API, you'll need an access token. Once you have that, create a new\r\nclient using the default HTTP manager.\r\n\r\n~~~ {.haskell .ignore}\r\nimport Strive\r\nlet token = \"...\"\r\nclient <- newClient token\r\n-- Client {..}\r\n~~~\r\n\r\nNote: This file is executable. Compile and run it with these commands.\r\n\r\n~~~ {.sh}\r\n$ cabal exec ghc -- -pgmL markdown-unlit -x lhs README.md\r\n$ ./README ACCESS_TOKEN\r\n~~~\r\n\r\n<!--\r\n~~~ {.haskell}\r\nimport           Data.Maybe         (fromMaybe, listToMaybe)\r\nimport           Data.Time.Calendar (fromGregorian)\r\nimport           Data.Time.Clock    (UTCTime (UTCTime))\r\nimport           Strive\r\nimport           System.Environment (getArgs)\r\n\r\nmain :: IO ()\r\nmain = do\r\n    args <- getArgs\r\n    let token = fromMaybe \"\" (listToMaybe args)\r\n    client <- newClient token\r\n~~~\r\n-->\r\n\r\nMany of the examples use the same parameters.\r\n\r\n~~~ {.haskell}\r\n    let activityId        = 141273622\r\n    let activityType      = Just \"riding\"\r\n    let after             = UTCTime (fromGregorian 1970 0 0) 0\r\n    let ageGroup          = Just \"0_24\"\r\n    let athleteId         = 65516\r\n    let before            = UTCTime (fromGregorian 2020 0 0) 0\r\n    let bounds            = (32, -96, 33, -95)\r\n    let clubId            = 11193\r\n    let range             = Just \"this_year\"\r\n    let effortId          = 1595370098\r\n    let following         = Just False\r\n    let gearId            = \"b387855\"\r\n    let gender            = Just 'F'\r\n    let includeAllEfforts = Just True\r\n    let includeMarkdown   = Just False\r\n    let maxCat            = Just 5\r\n    let minCat            = Just 0\r\n    let page              = Just 1\r\n    let perPage           = Just 200\r\n    let resolution        = Just \"low\"\r\n    let segmentId         = 4773104\r\n    let seriesType        = Just \"time\"\r\n    let streamTypes       = [\"time\"]\r\n    let weightClass       = Just \"55_64\"\r\n~~~\r\n\r\n### Authentication\r\n\r\n#### Request Access\r\n\r\n<https://github.com/tfausak/strive/issues/36>\r\n\r\n#### Token Exchange\r\n\r\n<https://github.com/tfausak/strive/issues/37>\r\n\r\n#### Deauthorization\r\n\r\n<https://github.com/tfausak/strive/issues/38>\r\n\r\n### Athletes\r\n\r\n#### Retrieve Current Athlete\r\n\r\n~~~ {.haskell}\r\n    currentAthlete <- getCurrentAthlete client\r\n    print currentAthlete\r\n    -- Right (AthleteDetailed {..})\r\n~~~\r\n\r\n#### Retrieve Another Athlete\r\n\r\n~~~ {.haskell}\r\n    athlete <- getAthlete client athleteId\r\n    print athlete\r\n    -- Right (AthleteSummary {..})\r\n~~~\r\n\r\n#### Update Current Athlete\r\n\r\n<https://github.com/tfausak/strive/issues/7>\r\n\r\n#### List Athlete K/QOMs/CRs\r\n\r\n~~~ {.haskell}\r\n    athleteCRs <- getAthleteCRs client athleteId page perPage\r\n    print athleteCRs\r\n    -- Right [EffortSummary {..},..]\r\n~~~\r\n\r\n### Friends and Followers\r\n\r\n#### List Athlete Friends\r\n\r\n~~~ {.haskell}\r\n    currentFriends <- getCurrentFriends client page perPage\r\n    print currentFriends\r\n    -- Right [AthleteSummary {..},..]\r\n~~~\r\n\r\n#### List Athlete Followers\r\n\r\n~~~ {.haskell}\r\n    currentFollowers <- getCurrentFollowers client page perPage\r\n    print currentFollowers\r\n    -- Right [AthleteSummary {..},..]\r\n~~~\r\n\r\n#### List Both Following\r\n\r\n~~~ {.haskell}\r\n    commonFriends <- getCommonFriends client athleteId page perPage\r\n    print commonFriends\r\n    -- Right [AthleteSummary {..},..]\r\n~~~\r\n\r\n### Activities\r\n\r\n#### Create an Activity\r\n\r\n<https://github.com/tfausak/strive/issues/12>\r\n\r\n#### Retrieve an Activity\r\n\r\n~~~ {.haskell}\r\n    activity <- getActivity client activityId includeAllEfforts\r\n    print activity\r\n    -- Right (ActivitySummary {..})\r\n~~~\r\n\r\n#### Update an Activity\r\n\r\n<https://github.com/tfausak/strive/issues/14>\r\n\r\n#### Delete an Activity\r\n\r\n<https://github.com/tfausak/strive/issues/15>\r\n\r\n#### List Athlete Activities\r\n\r\n~~~ {.haskell}\r\n    currentActivities <- getCurrentActivities client (Just before) (Just after) page perPage\r\n    print currentActivities\r\n    -- Right [ActivitySummary {..},..]\r\n~~~\r\n\r\n#### List Friends' Activities\r\n\r\n~~~ {.haskell}\r\n    feed <- getFeed client page perPage\r\n    print feed\r\n    -- Right [ActivitySummary {..},..]\r\n~~~\r\n\r\n#### List Activity Zones\r\n\r\n~~~ {.haskell}\r\n    activityZones <- getActivityZones client activityId\r\n    print activityZones\r\n    -- Right [ZoneSummary {..},..]\r\n~~~\r\n\r\n#### List Activity Laps\r\n\r\n~~~ {.haskell}\r\n    activityLaps <- getActivityLaps client activityId\r\n    print activityLaps\r\n    -- Right [ZoneSummary {..},..]\r\n~~~\r\n\r\n### Comments\r\n\r\n#### List Activity Comments\r\n\r\n~~~ {.haskell}\r\n    activityComments <- getActivityComments client activityId includeMarkdown page perPage\r\n    print activityComments\r\n    -- Right [CommentSummary {..},..]\r\n~~~\r\n\r\n### Kudos\r\n\r\n#### List Activity Kudoers\r\n\r\n~~~ {.haskell}\r\n    activityKudoers <- getActivityKudoers client activityId page perPage\r\n    print activityKudoers\r\n    -- Right [AthleteSummary {..},..]\r\n~~~\r\n\r\n### Photos\r\n\r\n#### List Activity Photos\r\n\r\n~~~ {.haskell}\r\n    activityPhotos <- getActivityPhotos client activityId\r\n    print activityPhotos\r\n    -- Right [PhotoSummary {..},..]\r\n~~~\r\n\r\n### Clubs\r\n\r\n#### Retrieve a Club\r\n\r\n~~~ {.haskell}\r\n    club <- getClub client clubId\r\n    print club\r\n    -- Right (ClubDetailed {..})\r\n~~~\r\n\r\n#### List Athlete Clubs\r\n\r\n~~~ {.haskell}\r\n    currentClubs <- getCurrentClubs client\r\n    print currentClubs\r\n    -- Right [ClubSummary {..},..]\r\n~~~\r\n\r\n#### List Club Members\r\n\r\n~~~ {.haskell}\r\n    clubMembers <- getClubMembers client clubId page perPage\r\n    print clubMembers\r\n    -- Right [AthleteSummary {..},..]\r\n~~~\r\n\r\n#### List Club Activities\r\n\r\n~~~ {.haskell}\r\n    clubActivities <- getClubActivities client clubId page perPage\r\n    print clubActivities\r\n    -- Right [ActivitySummary {..},..]\r\n~~~\r\n\r\n### Gear\r\n\r\n#### Retrieve Gear\r\n\r\n~~~ {.haskell}\r\n    gear <- getGear client gearId\r\n    print gear\r\n    -- Right (GearDetailed {..})\r\n~~~\r\n\r\n### Segments\r\n\r\n#### Retrieve a Segment\r\n\r\n~~~ {.haskell}\r\n    segment <- getSegment client segmentId\r\n    print segment\r\n    -- Right (SegmentDetailed {..})\r\n~~~\r\n\r\n#### List Starred Segments\r\n\r\n~~~ {.haskell}\r\n    starredSegments <- getStarredSegments client page perPage\r\n    print starredSegments\r\n    -- Right [SegmentSummary {..},..]\r\n~~~\r\n\r\n#### List Efforts\r\n\r\n~~~ {.haskell}\r\n    efforts <- getSegmentEfforts client segmentId (Just athleteId) (Just (after, before)) page perPage\r\n    print efforts\r\n    -- Right [EffortSummary {..},..]\r\n~~~\r\n\r\n#### Segment Leaderboard\r\n\r\n~~~ {.haskell}\r\n    segmentLeaders <- getSegmentLeaderboard client segmentId gender ageGroup weightClass following (Just clubId) range page perPage\r\n    print segmentLeaders\r\n    -- Right [SegmentLeader {..},..]\r\n~~~\r\n\r\n#### Segment Explorer\r\n\r\n~~~ {.haskell}\r\n    segments <- exploreSegments client bounds activityType minCat maxCat\r\n    print segments\r\n    -- Right [SegmentExploration {..},..]\r\n~~~\r\n\r\n### Segment Efforts\r\n\r\n#### Retrieve a Segment Effort\r\n\r\n~~~ {.haskell}\r\n    effort <- getEffort client effortId\r\n    print effort\r\n    -- Right (EffortSummary {..})\r\n~~~\r\n\r\n### Streams\r\n\r\n#### Retrieve Activity Streams\r\n\r\n~~~ {.haskell}\r\n    activityStreams <- getActivityStreams client activityId streamTypes resolution seriesType\r\n    print activityStreams\r\n    -- Right [StreamDetailed {..},..]\r\n~~~\r\n\r\n#### Retrieve Effort Streams\r\n\r\n~~~ {.haskell}\r\n    effortStreams <- getEffortStreams client effortId streamTypes resolution seriesType\r\n    print effortStreams\r\n    -- Right [StreamDetailed {..},..]\r\n~~~\r\n\r\n#### Retrieve Segment Streams\r\n\r\n~~~ {.haskell}\r\n    segmentStreams <- getSegmentStreams client segmentId streamTypes resolution seriesType\r\n    print segmentStreams\r\n    -- Right [StreamDetailed {..},..]\r\n~~~\r\n\r\n### Uploads\r\n\r\n#### Upload an Activity\r\n\r\n<https://github.com/tfausak/strive/issues/34>\r\n\r\n#### Check Upload Status\r\n\r\n<https://github.com/tfausak/strive/issues/35>\r\n\r\n[1]: https://github.com/tfausak/strive\r\n[2]: http://strava.github.io/api/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}