{"name":"Strive","tagline":"A Haskell client for the Strava V3 API.","body":"<p align=\"center\">\r\n    Strive is a Haskell client for the <a href=\"http://strava.github.io/api/\">Strava V3 API</a>.\r\n</p>\r\n\r\n<p align=\"center\">\r\n    <a href=\"https://hackage.haskell.org/package/strive\">\r\n        <img alt=\"\" src=\"https://img.shields.io/hackage/v/strive.svg\">\r\n    </a>\r\n    <a href=\"https://travis-ci.org/tfausak/strive\">\r\n        <img alt=\"\" src=\"https://img.shields.io/travis/tfausak/strive/master.svg\">\r\n    </a>\r\n    <a href=\"http://packdeps.haskellers.com/feed?needle=strive\">\r\n        <img alt=\"\" src=\"https://img.shields.io/hackage-deps/v/strive.svg\">\r\n    </a>\r\n</p>\r\n\r\n<hr>\r\n\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n  - [Authentication](#authentication)\r\n    - [Request access](#request-access)\r\n    - [Token exchange](#token-exchange)\r\n    - [Deauthorization](#deauthorization)\r\n  - [Athletes](#athletes)\r\n    - [Retrieve current athlete](#retrieve-current-athlete)\r\n    - [Retrieve another athlete](#retrieve-another-athlete)\r\n    - [Update current athlete](#update-current-athlete)\r\n    - [Totals and stats](#totals-and-stats)\r\n    - [List athlete K/QOMs/CRs](#list-athlete-kqomscrs)\r\n  - [Friends and followers](#friends-and-followers)\r\n    - [List athlete friends](#list-athlete-friends)\r\n    - [List athlete followers](#list-athlete-followers)\r\n    - [List both following](#list-both-following)\r\n  - [Activities](#activities)\r\n    - [Create an activity](#create-an-activity)\r\n    - [Retrieve an activity](#retrieve-an-activity)\r\n    - [Update an activity](#update-an-activity)\r\n    - [Delete an activity](#delete-an-activity)\r\n    - [List athlete activities](#list-athlete-activities)\r\n    - [List related activities](#list-related-activities)\r\n    - [List friends' activities](#list-friends-activities)\r\n    - [List activity zones](#list-activity-zones)\r\n    - [List activity laps](#list-activity-laps)\r\n  - [Comments](#comments)\r\n    - [List activity comments](#list-activity-comments)\r\n  - [Kudos](#kudos)\r\n    - [List activity kudoers](#list-activity-kudoers)\r\n  - [Photos](#photos)\r\n    - [List activity photos](#list-activity-photos)\r\n  - [Clubs](#clubs)\r\n    - [Retrieve a club](#retrieve-a-club)\r\n    - [List athlete clubs](#list-athlete-clubs)\r\n    - [List club members](#list-club-members)\r\n    - [List club activities](#list-club-activities)\r\n    - [Join a club](#join-a-club)\r\n    - [Leave a club](#leave-a-club)\r\n  - [Gear](#gear)\r\n    - [Retrieve gear](#retrieve-gear)\r\n  - [Segments](#segments)\r\n    - [Retrieve a segment](#retrieve-a-segment)\r\n    - [List starred segments](#list-starred-segments)\r\n    - [List efforts](#list-efforts)\r\n    - [Segment leaderboard](#segment-leaderboard)\r\n    - [Segment explorer](#segment-explorer)\r\n  - [Segment efforts](#segment-efforts)\r\n    - [Retrieve a segment effort](#retrieve-a-segment-effort)\r\n  - [Streams](#streams)\r\n    - [Retrieve activity streams](#retrieve-activity-streams)\r\n    - [Retrieve effort streams](#retrieve-effort-streams)\r\n    - [Retrieve segment streams](#retrieve-segment-streams)\r\n  - [Uploads](#uploads)\r\n    - [Upload an activity](#upload-an-activity)\r\n    - [Check upload status](#check-upload-status)\r\n\r\n## Installation\r\n\r\nAdd it to your Cabal file:\r\n\r\n~~~\r\nlibrary\r\n  build-depends:\r\n    strive ==1.*\r\n~~~\r\n\r\nOr install it manually:\r\n\r\n~~~ {.sh}\r\n$ cabal update\r\n$ cabal install 'strive ==1.*'\r\n~~~\r\n\r\n## Usage\r\n\r\nTo use the API, you'll need an access token. Once you have that, create a new\r\nclient using the default HTTP manager.\r\n\r\n~~~ {.haskell .ignore}\r\nimport Strive\r\nlet token = \"a token\"\r\nclient <- buildClient token\r\n~~~\r\n\r\nMost types implement lenses for their fields. Lenses are preferred over directly\r\naccessing the fields. For instance, instead of doing this:\r\n\r\n~~~ {.haskell .ignore}\r\nclient_accessToken (client { client_accessToken = \"record token\" })\r\n-- \"record token\"\r\n~~~\r\n\r\nDo this:\r\n\r\n~~~ {.haskell .ignore}\r\nget accessToken (set accessToken \"lens token\" client)\r\n-- \"lens token\"\r\n~~~\r\n\r\n<!--\r\n\r\nThis setup is required for these examples to work, but it isn't required for a\r\nreader of this file to understand what's going on.\r\n\r\n~~~ {.haskell}\r\n{-# LANGUAGE OverloadedStrings #-}\r\n\r\nimport Data.ByteString.Char8 (pack)\r\nimport Data.Time.Calendar (fromGregorian)\r\nimport Data.Time.Clock (UTCTime (UTCTime))\r\nimport Strive\r\nimport System.Exit (exitSuccess)\r\n\r\nmain :: IO ()\r\nmain = do\r\n  _ <- exitSuccess\r\n  client <- buildClient (Just \"token\")\r\n~~~\r\n\r\n-->\r\n\r\n### [Authentication](http://strava.github.io/api/v3/oauth/)\r\n\r\n#### [Request access](http://strava.github.io/api/v3/oauth/#get-authorize)\r\n\r\n~~~ {.haskell}\r\n  let authorizeUrl = buildAuthorizeUrl 1790 \"http://localhost\" $ with\r\n        [ set approvalPrompt False\r\n        , set privateScope True\r\n        , set writeScope True\r\n        , set state \"...\"\r\n        ]\r\n  print (authorizeUrl :: String)\r\n~~~\r\n\r\n#### [Token exchange](http://strava.github.io/api/v3/oauth/#post-token)\r\n\r\n~~~ {.haskell}\r\n  tokenExchangeResponse <- exchangeToken 1790 \"secret\" \"code\"\r\n  print (tokenExchangeResponse :: Result TokenExchangeResponse)\r\n~~~\r\n\r\n#### [Deauthorization](http://strava.github.io/api/v3/oauth/#deauthorize)\r\n\r\n~~~ {.haskell}\r\n  deauthorizationResponse <- deauthorize client\r\n  print (deauthorizationResponse :: Result DeauthorizationResponse)\r\n~~~\r\n\r\n### [Athletes](http://strava.github.io/api/v3/athlete/)\r\n\r\n#### [Retrieve current athlete](http://strava.github.io/api/v3/athlete/#get-details)\r\n\r\n~~~ {.haskell}\r\n  currentAthlete <- getCurrentAthlete client\r\n  print (currentAthlete :: Result AthleteDetailed)\r\n~~~\r\n\r\n#### [Retrieve another athlete](http://strava.github.io/api/v3/athlete/#get-another-details)\r\n\r\n~~~ {.haskell}\r\n  anotherAthlete <- getAthlete client 65516\r\n  print (anotherAthlete :: Result AthleteSummary)\r\n~~~\r\n\r\n#### [Update current athlete](http://strava.github.io/api/v3/athlete/#update)\r\n\r\n~~~ {.haskell}\r\n  updatedAthlete <- updateCurrentAthlete client $ with\r\n    [ set city (Just \"Dallas\")\r\n    , set state (Just \"Texas\")\r\n    , set country (Just \"United States\")\r\n    , set sex (Just Male)\r\n    , set weight (Just 72.57)\r\n    ]\r\n  print (updatedAthlete :: Result AthleteDetailed)\r\n~~~\r\n\r\n#### [Totals and stats](http://strava.github.io/api/v3/athlete/#stats)\r\n\r\n~~~ {.haskell}\r\n  athleteStats <- getAthleteStats client 65516\r\n  print (athleteStats :: Result AthleteStats)\r\n~~~\r\n\r\n#### [List athlete K/QOMs/CRs](http://strava.github.io/api/v3/athlete/#koms)\r\n\r\n~~~ {.haskell}\r\n  athleteCrs <- getAthleteCrs client 65516 $ with\r\n    [ set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (athleteCrs :: Result [EffortDetailed])\r\n~~~\r\n\r\n### [Friends and followers](http://strava.github.io/api/v3/follow/)\r\n\r\n#### [List athlete friends](http://strava.github.io/api/v3/follow/#friends)\r\n\r\n~~~ {.haskell}\r\n  currentFriends <- getCurrentFriends client $ with\r\n    [ set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (currentFriends :: Result [AthleteSummary])\r\n~~~\r\n\r\n~~~ {.haskell}\r\n  friends <- getFriends client 65516 $ with\r\n    [ set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (friends :: Result [AthleteSummary])\r\n~~~\r\n\r\n#### [List athlete followers](http://strava.github.io/api/v3/follow/#followers)\r\n\r\n~~~ {.haskell}\r\n  currentFollowers <- getCurrentFollowers client $ with\r\n    [ set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (currentFollowers :: Result [AthleteSummary])\r\n~~~\r\n\r\n~~~ {.haskell}\r\n  followers <- getFollowers client 65516 $ with\r\n    [ set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (followers :: Result [AthleteSummary])\r\n~~~\r\n\r\n#### [List both following](http://strava.github.io/api/v3/follow/#both)\r\n\r\n~~~ {.haskell}\r\n  commonFriends <- getCommonFriends client 65516 $ with\r\n    [ set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (commonFriends :: Result [AthleteSummary])\r\n~~~\r\n\r\n### [Activities](http://strava.github.io/api/v3/activities/)\r\n\r\n#### [Create an activity](http://strava.github.io/api/v3/activities/#create)\r\n\r\n~~~ {.haskell}\r\n  createdActivity <- createActivity client \"An Example\" Run (UTCTime (fromGregorian 1970 0 0) 0) 10 $ with\r\n    [ set description (Just \"...\")\r\n    , set distance (Just 100.0)\r\n    ]\r\n  print (createdActivity :: Result ActivityDetailed)\r\n~~~\r\n\r\n#### [Retrieve an activity](http://strava.github.io/api/v3/activities/#get-details)\r\n\r\n~~~ {.haskell}\r\n  activity <- getActivity client 141273622 $ with\r\n    [ set allEfforts True\r\n    ]\r\n  print (activity :: Result ActivitySummary)\r\n~~~\r\n\r\n#### [Update an activity](http://strava.github.io/api/v3/activities/#put-updates)\r\n\r\n~~~ {.haskell}\r\n  updatedActivity <- updateActivity client 141273622 $ with\r\n    [ set name (Just \"WedEx Pit Stop\")\r\n    , set Strive.type (Just Ride)\r\n    , set private (Just False)\r\n    , set commute (Just True)\r\n    , set trainer (Just False)\r\n    , set gearId (Just \"b387882\")\r\n    , set description Nothing\r\n    ]\r\n  print (updatedActivity :: Result ActivityDetailed)\r\n~~~\r\n\r\n#### [Delete an activity](http://strava.github.io/api/v3/activities/#delete)\r\n\r\n~~~ {.haskell}\r\n  deletedActivity <- deleteActivity client 162674281\r\n  print (deletedActivity :: Result ())\r\n~~~\r\n\r\n#### [List athlete activities](http://strava.github.io/api/v3/activities/#get-activities)\r\n\r\n~~~ {.haskell}\r\n  currentActivities <- getCurrentActivities client $ with\r\n    [ set before (Just (UTCTime (fromGregorian 1970 0 0) 0))\r\n    , set after (Just (UTCTime (fromGregorian 1970 0 0) 0))\r\n    , set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (currentActivities :: Result [ActivitySummary])\r\n~~~\r\n\r\n#### [List related activities](http://strava.github.io/api/v3/activities/#get-related)\r\n\r\n~~~ {.haskell}\r\n  relatedActivities <- getRelatedActivities client 141273622 $ with\r\n    [ set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (relatedActivities :: Result [ActivitySummary])\r\n~~~\r\n\r\n#### [List friends' activities](http://strava.github.io/api/v3/activities/#get-feed)\r\n\r\n~~~ {.haskell}\r\n  feed <- getFeed client $ with\r\n    [ set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (feed :: Result [ActivitySummary])\r\n~~~\r\n\r\n#### [List activity zones](http://strava.github.io/api/v3/activities/#zones)\r\n\r\n~~~ {.haskell}\r\n  activityZones <- getActivityZones client 141273622\r\n  print (activityZones :: Result [ActivityZoneDetailed])\r\n~~~\r\n\r\n#### [List activity laps](http://strava.github.io/api/v3/activities/#laps)\r\n\r\n~~~ {.haskell}\r\n  activityLaps <- getActivityLaps client 141273622\r\n  print (activityLaps :: Result [ActivityLapSummary])\r\n~~~\r\n\r\n### [Comments](http://strava.github.io/api/v3/comments/)\r\n\r\n#### [List activity comments](http://strava.github.io/api/v3/comments/#list)\r\n\r\n~~~ {.haskell}\r\n  activityComments <- getActivityComments client 90112360 $ with\r\n    [ set markdown True\r\n    , set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (activityComments :: Result [CommentSummary])\r\n~~~\r\n\r\n### [Kudos](http://strava.github.io/api/v3/kudos/)\r\n\r\n#### [List activity kudoers](http://strava.github.io/api/v3/kudos/#list)\r\n\r\n~~~ {.haskell}\r\n  activityKudoers <- getActivityKudoers client 141273622 $ with\r\n    [ set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (activityKudoers :: Result [AthleteSummary])\r\n~~~\r\n\r\n### [Photos](http://strava.github.io/api/v3/photos/)\r\n\r\n#### [List activity photos](http://strava.github.io/api/v3/photos/#list)\r\n\r\n~~~ {.haskell}\r\n  activityPhotos <- getActivityPhotos client 141273622\r\n  print (activityPhotos :: Result [PhotoSummary])\r\n~~~\r\n\r\n### [Clubs](http://strava.github.io/api/v3/clubs/)\r\n\r\n#### [Retrieve a club](http://strava.github.io/api/v3/clubs/#get-details)\r\n\r\n~~~ {.haskell}\r\n  club <- getClub client 11193\r\n  print (club :: Result ClubDetailed)\r\n~~~\r\n\r\n#### [List athlete clubs](http://strava.github.io/api/v3/clubs/#get-athletes)\r\n\r\n~~~ {.haskell}\r\n  currentClubs <- getCurrentClubs client\r\n  print (currentClubs :: Result [ClubSummary])\r\n~~~\r\n\r\n#### [List club members](http://strava.github.io/api/v3/clubs/#get-members)\r\n\r\n~~~ {.haskell}\r\n  clubMembers <- getClubMembers client 11193 $ with\r\n    [ set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (clubMembers :: Result [AthleteSummary])\r\n~~~\r\n\r\n#### [List club activities](http://strava.github.io/api/v3/clubs/#get-activities)\r\n\r\n~~~ {.haskell}\r\n  clubActivities <- getClubActivities client 11193 $ with\r\n    [ set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (clubActivities :: Result [ActivitySummary])\r\n~~~\r\n\r\n#### [Join a club](http://strava.github.io/api/v3/clubs/#join)\r\n\r\n~~~ {.haskell}\r\n  joinedClub <- joinClub client 165\r\n  print (joinedClub :: Result ())\r\n~~~\r\n\r\n#### [Leave a club](http://strava.github.io/api/v3/clubs/#leave)\r\n\r\n~~~ {.haskell}\r\n  leftClub <- leaveClub client 165\r\n  print (leftClub :: Result ())\r\n~~~\r\n\r\n### [Gear](http://strava.github.io/api/v3/gear/)\r\n\r\n#### [Retrieve gear](http://strava.github.io/api/v3/gear/#show)\r\n\r\n~~~ {.haskell}\r\n  theGear <- getGear client \"b387855\"\r\n  print (theGear :: Result GearDetailed)\r\n~~~\r\n\r\n### [Segments](http://strava.github.io/api/v3/segments/)\r\n\r\n#### [Retrieve a segment](http://strava.github.io/api/v3/segments/#retrieve)\r\n\r\n~~~ {.haskell}\r\n  theSegment <- getSegment client 4773104\r\n  print (theSegment :: Result SegmentDetailed)\r\n~~~\r\n\r\n#### [List starred segments](http://strava.github.io/api/v3/segments/#starred)\r\n\r\n~~~ {.haskell}\r\n  starredSegments <- getStarredSegments client $ with\r\n    [ set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (starredSegments :: Result [SegmentSummary])\r\n~~~\r\n\r\n#### [List efforts](http://strava.github.io/api/v3/segments/#efforts)\r\n\r\n~~~ {.haskell}\r\n  theSegmentEfforts <- getSegmentEfforts client 4773104 $ with\r\n    [ set athleteId (Just 65516)\r\n    , set range (Just ((UTCTime (fromGregorian 1970 0 0) 0), (UTCTime (fromGregorian 1970 0 0) 0)))\r\n    , set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (theSegmentEfforts :: Result [EffortDetailed])\r\n~~~\r\n\r\n#### [Segment leaderboard](http://strava.github.io/api/v3/segments/#leaderboard)\r\n\r\n~~~ {.haskell}\r\n  segmentLeaderboardResponse <- getSegmentLeaderboard client 4773104 $ with\r\n    [ set gender (Just Male)\r\n    , set ageGroup (Just Ages0To24)\r\n    , set weightClass (Just Kilograms65To74)\r\n    , set following (Just True)\r\n    , set clubId (Just 11193)\r\n    , set dateRange (Just \"this_year\")\r\n    , set contextEntries (Just 15)\r\n    , set page 1\r\n    , set perPage 2\r\n    ]\r\n  print (segmentLeaderboardResponse :: Result SegmentLeaderboardResponse)\r\n~~~\r\n\r\n#### [Segment explorer](http://strava.github.io/api/v3/segments/#explore)\r\n\r\n~~~ {.haskell}\r\n  segmentExplorerResponse <- exploreSegments client (32.0, -96.0, 33.0, -95.0) $ with\r\n    [ set activityType Riding\r\n    , set minCat 0\r\n    , set maxCat 5\r\n    ]\r\n  print (segmentExplorerResponse :: Result SegmentExplorerResponse)\r\n~~~\r\n\r\n### [Segment efforts](http://strava.github.io/api/v3/efforts/)\r\n\r\n#### [Retrieve a segment effort](http://strava.github.io/api/v3/efforts/#retrieve)\r\n\r\n~~~ {.haskell}\r\n  segmentEffort <- getSegmentEffort client 1595370098\r\n  print (segmentEffort :: Result EffortDetailed)\r\n~~~\r\n\r\n### [Streams](http://strava.github.io/api/v3/streams/)\r\n\r\n#### [Retrieve activity streams](http://strava.github.io/api/v3/streams/#activity)\r\n\r\n~~~ {.haskell}\r\n  activityStreams <- getActivityStreams client 141273622 [LatlngStream, WattsStream] $ with\r\n    [ set resolution (Just Low)\r\n    , set seriesType Time\r\n    ]\r\n  print (activityStreams :: Result [StreamDetailed])\r\n~~~\r\n\r\n#### [Retrieve effort streams](http://strava.github.io/api/v3/streams/#effort)\r\n\r\n~~~ {.haskell}\r\n  effortStreams <- getEffortStreams client 1595370098 [LatlngStream, WattsStream] $ with\r\n    [ set resolution (Just Low)\r\n    , set seriesType Time\r\n    ]\r\n  print (effortStreams :: Result [StreamDetailed])\r\n~~~\r\n\r\n#### [Retrieve segment streams](http://strava.github.io/api/v3/streams/#segment)\r\n\r\n~~~ {.haskell}\r\n  segmentStreams <- getSegmentStreams client 4773104 [LatlngStream, WattsStream] $ with\r\n    [ set resolution (Just Low)\r\n    , set seriesType Time\r\n    ]\r\n  print (segmentStreams :: Result [StreamDetailed])\r\n~~~\r\n\r\n### [Uploads](http://strava.github.io/api/v3/uploads/)\r\n\r\n#### [Upload an activity](http://strava.github.io/api/v3/uploads/#post-file)\r\n\r\n~~~ {.haskell}\r\n  uploadedActivity <- uploadActivity client (pack \"...\") \"gpx.gz\" $ with\r\n    [ set activityType (Just Ride)\r\n    , set name (Just \"An Example\")\r\n    , set description (Just \"...\")\r\n    , set private True\r\n    , set trainer False\r\n    , set externalId (Just \"...\")\r\n    ]\r\n  print (uploadedActivity :: Result UploadStatus)\r\n~~~\r\n\r\n#### [Check upload status](http://strava.github.io/api/v3/uploads/#get-status)\r\n\r\n~~~ {.haskell}\r\n  upload <- getUpload client 16486788\r\n  print (upload :: Result UploadStatus)\r\n~~~\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}