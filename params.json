{"name":"Strive","tagline":"A Haskell client for the Strava V3 API.","body":"[![Build Status](https://travis-ci.org/tfausak/strive.svg?branch=master)](https://travis-ci.org/tfausak/strive)\r\n\r\n-   [Usage](#usage)\r\n    -   [Authentication](#authentication)\r\n        -   [Request access](#request-access)\r\n        -   [Token exchange](#token-exchange)\r\n        -   [Deauthorization](#deauthorization)\r\n    -   [Athletes](#athletes)\r\n        -   [Retrieve current athlete](#retrieve-current-athlete)\r\n        -   [Retrieve another athlete](#retrieve-another-athlete)\r\n        -   [Update current athlete](#update-current-athlete)\r\n        -   [List athlete K/QOMs/CRs](#list-athlete-kqomscrs)\r\n    -   [Friends and followers](#friends-and-followers)\r\n        -   [List athlete friends](#list-athlete-friends)\r\n        -   [List athlete followers](#list-athlete-followers)\r\n        -   [List both following](#list-both-following)\r\n    -   [Activities](#activities)\r\n        -   [Create an activity](#create-an-activity)\r\n        -   [Retrieve an activity](#retrieve-an-activity)\r\n        -   [Update an activity](#update-an-activity)\r\n        -   [Delete an activity](#delete-an-activity)\r\n        -   [List athlete activities](#list-athlete-activities)\r\n        -   [List friends' activities](#list-friends-activities)\r\n        -   [List activity zones](#list-activity-zones)\r\n        -   [List activity laps](#list-activity-laps)\r\n    -   [Comments](#comments)\r\n        -   [List activity comments](#list-activity-comments)\r\n    -   [Kudos](#kudos)\r\n        -   [List activity kudoers](#list-activity-kudoers)\r\n    -   [Photos](#photos)\r\n        -   [List activity photos](#list-activity-photos)\r\n    -   [Clubs](#clubs)\r\n        -   [Retrieve a club](#retrieve-a-club)\r\n        -   [List athlete clubs](#list-athlete-clubs)\r\n        -   [List club members](#list-club-members)\r\n        -   [List club activities](#list-club-activities)\r\n    -   [Gear](#gear)\r\n        -   [Retrieve gear](#retrieve-gear)\r\n    -   [Segments](#segments)\r\n        -   [Retrieve a segment](#retrieve-a-segment)\r\n        -   [List starred segments](#list-starred-segments)\r\n        -   [List efforts](#list-efforts)\r\n        -   [Segment leaderboard](#segment-leaderboard)\r\n        -   [Segment explorer](#segment-explorer)\r\n        -   [Segment efforts](#segment-efforts)\r\n        -   [Retrieve a segment effort](#retrieve-a-segment-effort)\r\n    -   [Streams](#streams)\r\n        -   [Retrieve activity streams](#retrieve-activity-streams)\r\n        -   [Retrieve effort streams](#retrieve-effort-streams)\r\n        -   [Retrieve segment streams](#retrieve-segment-streams)\r\n    -   [Uploads](#uploads)\r\n        -   [Upload an activity](#upload-an-activity)\r\n        -   [Check upload status](#check-upload-status)\r\n\r\n## Usage\r\n\r\nTo use the API, you'll need an access token. Once you have that, create a new\r\nclient using the default HTTP manager.\r\n\r\n~~~ {.haskell .ignore}\r\nimport Strive\r\nlet token = \"...\"\r\nclient <- newClient token\r\n-- Client {..}\r\n~~~\r\n\r\n<!--\r\n~~~ {.haskell}\r\nimport Data.ByteString.Char8 (pack)\r\nimport Data.Time.Calendar (fromGregorian)\r\nimport Data.Time.Clock (UTCTime (UTCTime))\r\nimport Strive\r\nimport System.Exit (exitSuccess)\r\n\r\nmain :: IO ()\r\nmain = do\r\n  _ <- exitSuccess\r\n  client <- newClient \"\"\r\n~~~\r\n-->\r\n\r\nMany of the examples use the same parameters.\r\n\r\n~~~ {.haskell}\r\n  let activityId        = 141273622\r\n  let activityType      = Just \"riding\"\r\n  let after             = UTCTime (fromGregorian 1970 0 0) 0\r\n  let ageGroup          = Just \"0_24\"\r\n  let approvalPrompt    = Just \"force\"\r\n  let athleteId         = 65516\r\n  let before            = UTCTime (fromGregorian 2020 0 0) 0\r\n  let bounds            = (32, -96, 33, -95)\r\n  let clientId          = 1790\r\n  let clientSecret      = \"...\"\r\n  let clubId            = 11193\r\n  let code              = \"...\"\r\n  let effortId          = 1595370098\r\n  let following         = Just False\r\n  let gearId            = \"b387855\"\r\n  let gender            = Just 'F'\r\n  let includeAllEfforts = Just True\r\n  let includeMarkdown   = Just False\r\n  let maxCat            = Just 5\r\n  let minCat            = Just 0\r\n  let page              = Just 1\r\n  let perPage           = Just 200\r\n  let range             = Just \"this_year\"\r\n  let redirectURL       = \"http://localhost\"\r\n  let resolution        = Just \"low\"\r\n  let scope             = Just [\"view_private\", \"write\"]\r\n  let segmentId         = 4773104\r\n  let seriesType        = Just \"time\"\r\n  let state             = Nothing\r\n  let streamTypes       = [\"time\"]\r\n  let weightClass       = Just \"55_64\"\r\n~~~\r\n\r\n### [Authentication](http://strava.github.io/api/v3/oauth/)\r\n\r\n#### [Request access](http://strava.github.io/api/v3/oauth/#get-authorize)\r\n\r\n~~~ {.haskell}\r\n  let authorizeURL = buildAuthorizeURL clientId redirectURL approvalPrompt scope state\r\n  print authorizeURL\r\n  -- \"\"https://www.strava.com/oauth/authorize?..\"\r\n~~~\r\n\r\n#### [Token exchange](http://strava.github.io/api/v3/oauth/#post-token)\r\n\r\n~~~ {.haskell}\r\n  response <- postToken clientId clientSecret code\r\n  print response\r\n  -- Right (TokenExchangeResponse {..})\r\n~~~\r\n\r\n#### [Deauthorization](http://strava.github.io/api/v3/oauth/#deauthorize)\r\n\r\n~~~ {.haskell}\r\n  response' <- postDeauthorize client\r\n  print response'\r\n  -- Right (DeauthorizationResponse {..})\r\n~~~\r\n\r\n### [Athletes](http://strava.github.io/api/v3/athlete/)\r\n\r\n#### [Retrieve current athlete](http://strava.github.io/api/v3/athlete/#get-details)\r\n\r\n~~~ {.haskell}\r\n  currentAthlete <- getCurrentAthlete client\r\n  print currentAthlete\r\n  -- Right (AthleteDetailed {..})\r\n~~~\r\n\r\n#### [Retrieve another athlete](http://strava.github.io/api/v3/athlete/#get-another-details)\r\n\r\n~~~ {.haskell}\r\n  athlete <- getAthlete client athleteId\r\n  print athlete\r\n  -- Right (AthleteSummary {..})\r\n~~~\r\n\r\n#### [Update current athlete](http://strava.github.io/api/v3/athlete/#update)\r\n\r\n~~~ {.haskell}\r\n  updatedAthlete <- putCurrentAthlete client Nothing Nothing Nothing Nothing Nothing\r\n  print updatedAthlete\r\n  -- Right (AthleteDetailed {..})\r\n~~~\r\n\r\n#### [List athlete K/QOMs/CRs](http://strava.github.io/api/v3/athlete/#koms)\r\n\r\n~~~ {.haskell}\r\n  athleteCRs <- getAthleteCRs client athleteId page perPage\r\n  print athleteCRs\r\n  -- Right [EffortSummary {..},..]\r\n~~~\r\n\r\n### [Friends and followers](http://strava.github.io/api/v3/follow/)\r\n\r\n#### [List athlete friends](http://strava.github.io/api/v3/follow/#friends)\r\n\r\n~~~ {.haskell}\r\n  currentFriends <- getCurrentFriends client page perPage\r\n  print currentFriends\r\n  -- Right [AthleteSummary {..},..]\r\n~~~\r\n\r\n#### [List athlete followers](http://strava.github.io/api/v3/follow/#followers)\r\n\r\n~~~ {.haskell}\r\n  currentFollowers <- getCurrentFollowers client page perPage\r\n  print currentFollowers\r\n  -- Right [AthleteSummary {..},..]\r\n~~~\r\n\r\n#### [List both following](http://strava.github.io/api/v3/follow/#both)\r\n\r\n~~~ {.haskell}\r\n  commonFriends <- getCommonFriends client athleteId page perPage\r\n  print commonFriends\r\n  -- Right [AthleteSummary {..},..]\r\n~~~\r\n\r\n### [Activities](http://strava.github.io/api/v3/activities/)\r\n\r\n#### [Create an activity](http://strava.github.io/api/v3/activities/#create)\r\n\r\n~~~ {.haskell}\r\n  createdActivity <- postActivity client \"\" \"\" after 0 Nothing Nothing\r\n  print createdActivity\r\n  -- Right (AthleteDetailed {..})\r\n~~~\r\n\r\n#### [Retrieve an activity](http://strava.github.io/api/v3/activities/#get-details)\r\n\r\n~~~ {.haskell}\r\n  activity <- getActivity client activityId includeAllEfforts\r\n  print activity\r\n  -- Right (ActivitySummary {..})\r\n~~~\r\n\r\n#### [Update an activity](http://strava.github.io/api/v3/activities/#put-updates)\r\n\r\n~~~ {.haskell}\r\n  updatedActivity <- putActivity client activityId Nothing Nothing Nothing Nothing Nothing Nothing Nothing\r\n  print updatedActivity\r\n  -- Right (ActivityDetailed {..})\r\n~~~\r\n\r\n#### [Delete an activity](http://strava.github.io/api/v3/activities/#delete)\r\n\r\n~~~ {.haskell}\r\n  nothing <- deleteActivity client activityId\r\n  print nothing\r\n  -- Right (Null)\r\n~~~\r\n\r\n#### [List athlete activities](http://strava.github.io/api/v3/activities/#get-activities)\r\n\r\n~~~ {.haskell}\r\n  currentActivities <- getCurrentActivities client (Just before) (Just after) page perPage\r\n  print currentActivities\r\n  -- Right [ActivitySummary {..},..]\r\n~~~\r\n\r\n#### [List friends' activities](http://strava.github.io/api/v3/activities/#get-feed)\r\n\r\n~~~ {.haskell}\r\n  feed <- getFeed client page perPage\r\n  print feed\r\n  -- Right [ActivitySummary {..},..]\r\n~~~\r\n\r\n#### [List activity zones](http://strava.github.io/api/v3/activities/#zones)\r\n\r\n~~~ {.haskell}\r\n  activityZones <- getActivityZones client activityId\r\n  print activityZones\r\n  -- Right [ZoneSummary {..},..]\r\n~~~\r\n\r\n#### [List activity laps](http://strava.github.io/api/v3/activities/#laps)\r\n\r\n~~~ {.haskell}\r\n  activityLaps <- getActivityLaps client activityId\r\n  print activityLaps\r\n  -- Right [ZoneSummary {..},..]\r\n~~~\r\n\r\n### [Comments](http://strava.github.io/api/v3/comments/)\r\n\r\n#### [List activity comments](http://strava.github.io/api/v3/comments/#list)\r\n\r\n~~~ {.haskell}\r\n  activityComments <- getActivityComments client activityId includeMarkdown page perPage\r\n  print activityComments\r\n  -- Right [CommentSummary {..},..]\r\n~~~\r\n\r\n### [Kudos](http://strava.github.io/api/v3/kudos/)\r\n\r\n#### [List activity kudoers](http://strava.github.io/api/v3/kudos/#list)\r\n\r\n~~~ {.haskell}\r\n  activityKudoers <- getActivityKudoers client activityId page perPage\r\n  print activityKudoers\r\n  -- Right [AthleteSummary {..},..]\r\n~~~\r\n\r\n### [Photos](http://strava.github.io/api/v3/photos/)\r\n\r\n#### [List activity photos](http://strava.github.io/api/v3/photos/#list)\r\n\r\n~~~ {.haskell}\r\n  activityPhotos <- getActivityPhotos client activityId\r\n  print activityPhotos\r\n  -- Right [PhotoSummary {..},..]\r\n~~~\r\n\r\n### [Clubs](http://strava.github.io/api/v3/clubs/)\r\n\r\n#### [Retrieve a club](http://strava.github.io/api/v3/clubs/#get-details)\r\n\r\n~~~ {.haskell}\r\n  club <- getClub client clubId\r\n  print club\r\n  -- Right (ClubDetailed {..})\r\n~~~\r\n\r\n#### [List athlete clubs](http://strava.github.io/api/v3/clubs/#get-athletes)\r\n\r\n~~~ {.haskell}\r\n  currentClubs <- getCurrentClubs client\r\n  print currentClubs\r\n  -- Right [ClubSummary {..},..]\r\n~~~\r\n\r\n#### [List club members](http://strava.github.io/api/v3/clubs/#get-members)\r\n\r\n~~~ {.haskell}\r\n  clubMembers <- getClubMembers client clubId page perPage\r\n  print clubMembers\r\n  -- Right [AthleteSummary {..},..]\r\n~~~\r\n\r\n#### [List club activities](http://strava.github.io/api/v3/clubs/#get-activities)\r\n\r\n~~~ {.haskell}\r\n  clubActivities <- getClubActivities client clubId page perPage\r\n  print clubActivities\r\n  -- Right [ActivitySummary {..},..]\r\n~~~\r\n\r\n### [Gear](http://strava.github.io/api/v3/gear/)\r\n\r\n#### [Retrieve gear](http://strava.github.io/api/v3/gear/#show)\r\n\r\n~~~ {.haskell}\r\n  gear <- getGear client gearId\r\n  print gear\r\n  -- Right (GearDetailed {..})\r\n~~~\r\n\r\n### [Segments](http://strava.github.io/api/v3/segments/)\r\n\r\n#### [Retrieve a segment](http://strava.github.io/api/v3/segments/#retrieve)\r\n\r\n~~~ {.haskell}\r\n  segment <- getSegment client segmentId\r\n  print segment\r\n  -- Right (SegmentDetailed {..})\r\n~~~\r\n\r\n#### [List starred segments](http://strava.github.io/api/v3/segments/#starred)\r\n\r\n~~~ {.haskell}\r\n  starredSegments <- getStarredSegments client page perPage\r\n  print starredSegments\r\n  -- Right [SegmentSummary {..},..]\r\n~~~\r\n\r\n#### [List efforts](http://strava.github.io/api/v3/segments/#efforts)\r\n\r\n~~~ {.haskell}\r\n  efforts <- getSegmentEfforts client segmentId (Just athleteId) (Just (after, before)) page perPage\r\n  print efforts\r\n  -- Right [EffortSummary {..},..]\r\n~~~\r\n\r\n#### [Segment leaderboard](http://strava.github.io/api/v3/segments/#leaderboard)\r\n\r\n~~~ {.haskell}\r\n  segmentLeaders <- getSegmentLeaderboard client segmentId gender ageGroup weightClass following (Just clubId) range page perPage\r\n  print segmentLeaders\r\n  -- Right [SegmentLeader {..},..]\r\n~~~\r\n\r\n#### [Segment explorer](http://strava.github.io/api/v3/segments/#explore)\r\n\r\n~~~ {.haskell}\r\n  segments <- exploreSegments client bounds activityType minCat maxCat\r\n  print segments\r\n  -- Right [SegmentExploration {..},..]\r\n~~~\r\n\r\n### [Segment efforts](http://strava.github.io/api/v3/efforts/)\r\n\r\n#### [Retrieve a segment effort](http://strava.github.io/api/v3/efforts/#retrieve)\r\n\r\n~~~ {.haskell}\r\n  effort <- getEffort client effortId\r\n  print effort\r\n  -- Right (EffortSummary {..})\r\n~~~\r\n\r\n### [Streams](http://strava.github.io/api/v3/streams/)\r\n\r\n#### [Retrieve activity streams](http://strava.github.io/api/v3/streams/#activity)\r\n\r\n~~~ {.haskell}\r\n  activityStreams <- getActivityStreams client activityId streamTypes resolution seriesType\r\n  print activityStreams\r\n  -- Right [StreamDetailed {..},..]\r\n~~~\r\n\r\n#### [Retrieve effort streams](http://strava.github.io/api/v3/streams/#effort)\r\n\r\n~~~ {.haskell}\r\n  effortStreams <- getEffortStreams client effortId streamTypes resolution seriesType\r\n  print effortStreams\r\n  -- Right [StreamDetailed {..},..]\r\n~~~\r\n\r\n#### [Retrieve segment streams](http://strava.github.io/api/v3/streams/#segment)\r\n\r\n~~~ {.haskell}\r\n  segmentStreams <- getSegmentStreams client segmentId streamTypes resolution seriesType\r\n  print segmentStreams\r\n  -- Right [StreamDetailed {..},..]\r\n~~~\r\n\r\n### [Uploads](http://strava.github.io/api/v3/uploads/)\r\n\r\n#### [Upload an activity](http://strava.github.io/api/v3/uploads/#post-file)\r\n\r\n~~~ {.haskell}\r\n  postedUpload <- postUpload client (pack \"...\") \"gpx.gz\" Nothing Nothing Nothing Nothing Nothing Nothing\r\n  print postedUpload\r\n  -- Right (UploadDetailed {..})\r\n~~~\r\n\r\n#### [Check upload status](http://strava.github.io/api/v3/uploads/#get-status)\r\n\r\n~~~ {.haskell}\r\n  upload <- getUpload client 123\r\n  print upload\r\n  -- Right (UploadDetailed {..})\r\n~~~\r\n\r\n[1]: https://github.com/tfausak/strive\r\n[2]: http://strava.github.io/api/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}